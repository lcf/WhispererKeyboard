//
//  KeyboardViewController.swift
//  keyboard
//
//  Created by Alexander Steshenko on 9/11/23.
//

import UIKit
import AVFoundation
import SwiftUI

/// Custom keyboard view. This keyboard only has one button in the center which begins recording once pressed
/// Recording is performed by the main app "WhispererKeyboardApp" immediately when it opens
/// After recording is processed by OpenAI, the keyboard inserts the text into the text edit field that is in focus
class KeyboardViewController: UIInputViewController {
    
    // The following block is required to keep the height of the keyboard from fluctuating.
    var keyboardHeight: CGFloat = 155
    var KeyboardVCHeightConstraint: NSLayoutConstraint!
    var containerViewHeight: CGFloat = 0

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.view.removeConstraint(KeyboardVCHeightConstraint)
        self.view.addConstraint(self.KeyboardVCHeightConstraint)
    }
    
    // This shared container is necessary to pass data between the main app and the keyboard extension
    // Since it's not possible to access microphone from within the keyboard itself
    let sharedDefaults = UserDefaults(suiteName: "group.WhispererKeyboardSharing")
    
    // This function is called every time when keyboard becomes visible
    // It may be after transcription just finished in the main app
    // Keyboard extension checks if data is available in the shared container
    // and inserts it into the text edit field
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        // Whenever keyboard becomes visible on the screen, it may be after transcription has finished.
        if let transcribedText = sharedDefaults?.string(forKey: "transcribedText") {
            self.textDocumentProxy.insertText(transcribedText)
            sharedDefaults?.removeObject(forKey: "transcribedText")
        }
    }

    // The keyboard has the only button that opens the main app when clicked
    // Configuration of the button is in the viewDidLoad method
    let recordButton: UIButton = UIButton(type: .system)

    override func viewDidLoad() {
        super.viewDidLoad()
        // Keyboard height settings
        self.KeyboardVCHeightConstraint = NSLayoutConstraint(
            item: self.view!, attribute: .height, relatedBy: .equal, toItem: nil,
            attribute: .notAnAttribute, multiplier: 1, constant: keyboardHeight+containerViewHeight)
        
        // Add record button to the keyboard view
        self.view.addSubview(recordButton)
        recordButton.setTitle("Record audio", for: .normal)
        recordButton.sizeToFit()
        recordButton.translatesAutoresizingMaskIntoConstraints = false

        recordButton.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive=true
        recordButton.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive=true

        // Add tap gesture recognizer
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleButtonTap))
        recordButton.addGestureRecognizer(tapGesture)
        
    
    }
    
    // The following block of functions was generated by ChatGPT. It opens the main application when the record button is tapped.
    
    // the Application scheme for interlinking is configered in Info.plist file or in XCode UI
    @objc func handleButtonTap() {
        self.openURL(url: NSURL(string:"WhispererKeyboardApp://")!)
    }
    
    func openURL(url: NSURL) -> Bool {
        do {
            let application = try self.sharedApplication()
            application.performSelector(inBackground: "openURL:", with: url)
            return true
        }
        catch {
            return false
        }
    }
    
    func sharedApplication() throws -> UIApplication {
        var responder: UIResponder? = self
        while responder != nil {
            if let application = responder as? UIApplication {
                return application
            }
            
            responder = responder?.next
        }
        
        throw NSError(domain: "UIInputViewController+sharedApplication.swift", code: 1, userInfo: nil)
    }
}
